<?php

/**
 * BaseWordTranslation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $word_id
 * @property string $lang
 * @property clob $content
 * @property enum $source
 * @property Word $Word
 * 
 * @method integer         getWordId()  Returns the current record's "word_id" value
 * @method string          getLang()    Returns the current record's "lang" value
 * @method clob            getContent() Returns the current record's "content" value
 * @method enum            getSource()  Returns the current record's "source" value
 * @method Word            getWord()    Returns the current record's "Word" value
 * @method WordTranslation setWordId()  Sets the current record's "word_id" value
 * @method WordTranslation setLang()    Sets the current record's "lang" value
 * @method WordTranslation setContent() Sets the current record's "content" value
 * @method WordTranslation setSource()  Sets the current record's "source" value
 * @method WordTranslation setWord()    Sets the current record's "Word" value
 * 
 * @package    rechnik
 * @subpackage model
 * @author     borislav
 * @version    SVN: $Id: Builder.php 7200 2010-02-21 09:37:37Z beberlei $
 */
abstract class BaseWordTranslation extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('word_translation');
        $this->hasColumn('word_id', 'integer', 3, array(
             'type' => 'integer',
             'length' => '3',
             ));
        $this->hasColumn('lang', 'string', 3, array(
             'type' => 'string',
             'length' => '3',
             ));
        $this->hasColumn('content', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('source', 'enum', null, array(
             'type' => 'enum',
             'default' => 'user',
             'values' => 
             array(
              0 => 'eurodict',
              1 => 'user',
             ),
             ));


        $this->index('word_lang', array(
             'fields' => 
             array(
              0 => 'word_id',
              1 => 'lang',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Word', array(
             'local' => 'word_id',
             'foreign' => 'id'));
    }
}